import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'org.asciidoctor.convert' version '2.4.0' apply false
}

final JEROMQ_VERSION = '0.5.2'
final GSON_VERSION = '2.8.6'

final PUBLISHABLE_PROJECTS = [
        'jupyter-jvm-api',
        'jupyter-jvm-basekernel',
        'jupyter-jvm-zmq-client',
        'jupyter-jvm-client-api',
        'jupyter-jvm-ipywidgets',
        'jupyter-jvm-shared-protocol'
]

wrapper {
    gradleVersion = '6.3'
    distributionType = Wrapper.DistributionType.ALL
}

allprojects {
    group 'io.github.spencerpark'

    apply plugin: 'java-library'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.compilerArgs << '-parameters'
        options.compilerArgs << '-Xlint:all' << '-Xlint:-rawtypes' << '-Xlint:-serial'
    }

    repositories {
        mavenCentral()
    }
}

project(':jupyter-jvm-basekernel') {
    version '3.0.0-SNAPSHOT'
    ext.pomName = 'Jupyter JVM Base Kernel'
    ext.pomDescription = 'An abstract kernel implementation for Jupyter kernels running on the Java virtual machine.'

    dependencies {
        api project(':jupyter-jvm-api')
        api project(':jupyter-jvm-shared-protocol')

        implementation group: 'org.zeromq', name: 'jeromq', version: JEROMQ_VERSION
        api group: 'com.google.code.gson', name: 'gson', version: GSON_VERSION

        testImplementation group: 'junit', name: 'junit', version: '4.12'
        testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    }

    task generateBuildInfo {
        final packageName = 'io.github.spencerpark.jupyter.kernel'
        final className = 'BaseKernelBuildInfo'
        final contents = """\
            |package $packageName;
            |class $className {
            |  public static final String VERSION = "${project.version}";
            |  public static final String NAME = "${project.name}";
            |  public static final String GROUP = "${project.group}";
            |}
            |""".stripMargin()

        final generatedSrcDir = file("$buildDir/generated/sources/buildInfo")
        final generatedPath = file("$generatedSrcDir/${packageName.replace('.', '/')}/${className}.java")

        inputs.property('contents', contents)
        outputs.file(generatedPath)

        sourceSets.main.java.srcDirs += generatedSrcDir

        doLast {
            generatedPath.write(contents, 'UTF-8')
        }
    }
    compileJava.dependsOn generateBuildInfo
}

project(':jupyter-jvm-api') {
    version '1.0.0-SNAPSHOT'
    ext.pomName = 'Jupyter JVM Kernel API'
    ext.pomDescription = 'A kernel interface to program extensions against.'

    dependencies {
        api group: 'com.google.code.gson', name: 'gson', version: GSON_VERSION

        testImplementation group: 'junit', name: 'junit', version: '4.12'
        testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'

        testImplementation group: 'com.google.jimfs', name: 'jimfs', version: '1.1'
    }
}

project(':jupyter-jvm-shared-protocol') {
    version '1.0.0-SNAPSHOT'
    ext.pomName = 'Jupyter JVM Protocol'
    ext.pomDescription = 'Jupyter protocol objects and components that are shared between the kernel and client.'

    dependencies {
        api project(':jupyter-jvm-api')
        implementation group: 'org.zeromq', name: 'jeromq', version: JEROMQ_VERSION
        api group: 'com.google.code.gson', name: 'gson', version: GSON_VERSION

        testImplementation group: 'junit', name: 'junit', version: '4.12'
    }
}

project(':jupyter-jvm-zmq-client') {
    version '0.0.1-SNAPSHOT'
    ext.pomName = 'Jupyter JVM Client'
    ext.pomDescription = 'A Java library for launching, connecting, and communicating with a Jupyter kernel.'

    dependencies {
        api project(':jupyter-jvm-client-api')
        api project(':jupyter-jvm-shared-protocol')
        implementation group: 'org.zeromq', name: 'jeromq', version: JEROMQ_VERSION
        api group: 'com.google.code.gson', name: 'gson', version: GSON_VERSION

        testImplementation group: 'junit', name: 'junit', version: '4.12'
    }
}

project(':jupyter-jvm-client-api') {
    version '0.0.1-SNAPSHOT'
    ext.pomName = 'Jupyter JVM Client API'
    ext.pomDescription = 'A Java library for launching, connecting, and communicating with a Jupyter kernel.'

    dependencies {
        api project(':jupyter-jvm-api')

        testImplementation group: 'junit', name: 'junit', version: '4.12'
    }
}

project(':jupyter-jvm-ipywidgets') {
    version '1.0.0-SNAPSHOT'
    ext.pomName = 'JVM ipywidgets'
    ext.pomDescription = 'A Java implementation of the ipywidgets backend.'

    dependencies {
        api project(':jupyter-jvm-api')
        api group: 'com.google.code.gson', name: 'gson', version: GSON_VERSION

        testImplementation group: 'junit', name: 'junit', version: '4.12'
    }
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}

configure(subprojects.findAll { it.name in PUBLISHABLE_PROJECTS }) {
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                // ossrhUsername and ossrhPassword are defined in the global gradle.properties on the
                // machine uploading the artifacts (including the keys). If not present only `publish`
                // should fail, not `publishToMavenLocal`. Essentially defer the failure as long as possible.
                def ossrhUsername = project.findProperty('ossrhUsername')
                def ossrhPassword = project.findProperty('ossrhPassword')

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name = project.pomName
                    packaging = 'jar'
                    description = project.pomDescription
                    url = "https://github.com/SpencerPark/jupyter-jvm"

                    scm {
                        url = 'https://github.com/SpencerPark/jupyter-jvm.git'
                        connection = 'scm:git:https://github.com/SpencerPark/jupyter-jvm.git'
                        developerConnection = 'scm:git:git@github.com:SpencerPark/jupyter-jvm.git'
                    }

                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'http://opensource.org/licenses/MIT'
                            distribution = 'repo'
                        }
                    }

                    developers {
                        developer {
                            id = 'SpencerPark'
                            name = 'Spencer Park'
                            email = 'spinnr95@gmail.com'
                        }
                    }
                }
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }
}